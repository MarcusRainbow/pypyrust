Function create_dict:
    Assign: type=<unknown>
    Name(d): type=HashMap<String, String>
    DictComp: type=HashMap<String, String>
    Name(k): type=String
    Name(v): type=String
    comprehension: type=<unknown>
    Tuple: type=<unknown>
    Name(k): type=String
    Name(v): type=String
    Store: type=<unknown>
    Call: type=[(&str, &str)]
    Name(zip): type=<unknown>
    Name(keys): type=&[&str]
    Name(values): type=&[&str]
    Return: type=HashMap<String, String>
    Name(d): type=HashMap<String, String>

Function access_dict:
    Assign: type=<unknown>
    Name(result): type=Vec<>
    List: type=&[]
    Load: type=Vec<>
    For: type=<unknown>
    Name(key): type=String
    Name(keys): type=&[&str]
    If: type=<unknown>
    Compare: type=bool
    Name(key): type=String
    In: type=<unknown>
    Name(dictionary): type=HashMap<&str, &str>
    Expr: type=Unknown
    Call: type=Unknown
    Attribute: type=Vec<>
    Name(result): type=Vec<>
    Load: type=Vec<>
    Subscript: type=&str
    Name(dictionary): type=HashMap<&str, &str>
    Index: type=String
    Name(key): type=String
    Load: type=Vec<>
    Return: type=Vec<>
    Name(result): type=Vec<>

Function extend_dict:
    Assign: type=<unknown>
    Subscript: type=&str
    Name(dictionary): type=HashMap<&str, &str>
    Index: type=&str
    Name(key): type=&str
    Store: type=<unknown>
    Name(value): type=&str

Function static_dict:
    Assign: type=<unknown>
    Name(d): type=HashMap<&str, i64>
    Dict: type=HashMap<&str, i64>
    Constant: type=&str
    Constant: type=&str
    Constant: type=&str
    Constant: type=i64
    Constant: type=i64
    Constant: type=i64
    Return: type=HashMap<&str, i64>
    Name(d): type=HashMap<&str, i64>

Function dict_methods:
    Assign: type=<unknown>
    Name(foobar): type=String
    Call: type=&str
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Constant: type=&str
    Constant: type=&str
    Expr: type=()
    Call: type=()
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Assign: type=<unknown>
    Subscript: type=&str
    Name(dictionary): type=HashMap<&str, &str>
    Index: type=&str
    Constant: type=&str
    Store: type=<unknown>
    Name(foobar): type=String
    Assert: type=bool
    Compare: type=bool
    Constant: type=&str
    In: type=<unknown>
    Call: type=[&str]
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Assert: type=bool
    Compare: type=bool
    Constant: type=&str
    In: type=<unknown>
    Call: type=[&str]
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    For: type=<unknown>
    Tuple: type=<unknown>
    Name(k): type=String
    Name(v): type=String
    Store: type=<unknown>
    Call: type=[(&str, &str)]
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Expr: type=()
    Call: type=()
    Name(print): type=<unknown>
    JoinedStr: type=String
    FormattedValue: type=String
    Name(k): type=String
    Constant: type=&str
    FormattedValue: type=String
    Name(v): type=String
    Assign: type=<unknown>
    Name(d): type=HashMap<&str, &str>
    Call: type=HashMap<&str, &str>
    Name(dict): type=<unknown>
    Call: type=[(&str, &str)]
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Expr: type=&str
    Call: type=&str
    Attribute: type=HashMap<&str, &str>
    Name(d): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Constant: type=&str
    Constant: type=&str
    Assert: type=bool
    Compare: type=bool
    Constant: type=&str
    NotIn: type=<unknown>
    Name(d): type=HashMap<&str, &str>
    Expr: type=()
    Call: type=()
    Attribute: type=HashMap<&str, &str>
    Name(d): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Call: type=[(&str, &str)]
    Attribute: type=HashMap<&str, &str>
    Name(dictionary): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Delete: type=&str
    Subscript: type=&str
    Name(d): type=HashMap<&str, &str>
    Index: type=&str
    Constant: type=&str
    Del: type=<unknown>
    Assign: type=<unknown>
    Name(bar): type=String
    Call: type=&str
    Attribute: type=HashMap<&str, &str>
    Name(d): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Constant: type=&str
    Constant: type=&str
    Assert: type=bool
    Compare: type=bool
    Name(bar): type=String
    Eq: type=<unknown>
    Constant: type=&str
    Assign: type=<unknown>
    Tuple: type=<unknown>
    Name(k): type=String
    Name(v): type=String
    Store: type=<unknown>
    Call: type=(&str, &str)
    Attribute: type=HashMap<&str, &str>
    Name(d): type=HashMap<&str, &str>
    Load: type=HashMap<&str, &str>
    Assert: type=bool
    BoolOp: type=bool
    And: type=(&str, &str)
    Compare: type=bool
    Name(k): type=String
    Eq: type=<unknown>
    Constant: type=&str
    Compare: type=bool
    Name(v): type=String
    Eq: type=<unknown>
    Constant: type=&str

