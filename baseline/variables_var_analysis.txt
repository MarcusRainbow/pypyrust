Function assignment:
    Assign: type=<unknown>
    Name(e): type=bool
    Name(a): type=bool
    Assign: type=<unknown>
    Name(f): type=String
    Name(b): type=&str
    Assign: type=<unknown>
    Name(g): type=i64
    Name(c): type=i64
    Assign: type=<unknown>
    Name(h): type=i64
    BinOp: type=i64
    Name(c): type=i64
    Add: type=i64
    Name(d): type=i64
    Assign: type=<unknown>
    Name(j): type=i64
    Name(k): type=i64
    Name(l): type=i64
    BinOp: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name(c): type=i64
    Add: type=i64
    Name(d): type=i64
    Add: type=i64
    Name(g): type=i64
    Add: type=i64
    Name(h): type=i64
    Return: type=i64
    IfExp: type=i64
    BoolOp: type=bool
    Or: type=
    BoolOp: type=bool
    And: type=
    Name(a): type=bool
    Name(e): type=bool
    Compare: type=bool
    Name(f): type=Unknown
    Eq: type=Unknown
    Constant: type=Unknown
    BinOp: type=i64
    BinOp: type=i64
    Name(j): type=i64
    Add: type=i64
    Name(k): type=i64
    Add: type=i64
    Name(l): type=i64
    Constant: type=i64

Function annotated_assignment:
    AnnAssign: type=<unknown>
    Name(e): type=i64
    Name(int): type=<unknown>
    Constant: type=i64
    AnnAssign: type=<unknown>
    Name(f): type=bool
    Name(bool): type=<unknown>
    Name(a): type=bool
    AnnAssign: type=<unknown>
    Name(g): type=String
    Name(str): type=<unknown>
    Name(b): type=&str
    AnnAssign: type=<unknown>
    Name(h): type=i64
    Name(int): type=<unknown>
    BinOp: type=i64
    Name(c): type=i64
    Add: type=i64
    Name(d): type=i64
    Return: type=i64
    IfExp: type=i64
    BoolOp: type=bool
    And: type=
    Name(a): type=bool
    Name(f): type=bool
    Compare: type=bool
    Name(g): type=Unknown
    Eq: type=Unknown
    Constant: type=Unknown
    BinOp: type=i64
    Name(e): type=i64
    Add: type=i64
    Name(h): type=i64
    Constant: type=i64

Function aug_assign:
    Assign: type=<unknown>
    Name(c): type=i64
    Constant: type=i64
    AugAssign: type=<unknown>
    Name(c): type=i64
    Add: type=i64
    Name(a): type=i64
    AugAssign: type=<unknown>
    Name(c): type=i64
    Sub: type=<unknown>
    Name(b): type=i64
    AugAssign: type=<unknown>
    Name(c): type=i64
    Div: type=<unknown>
    BinOp: type=i64
    Name(a): type=i64
    Add: type=i64
    Name(b): type=i64
    AugAssign: type=<unknown>
    Name(c): type=i64
    FloorDiv: type=<unknown>
    Name(a): type=i64
    AugAssign: type=<unknown>
    Name(c): type=i64
    Mult: type=<unknown>
    Name(b): type=i64
    Return: type=i64
    Name(c): type=i64

Function repeated_assign:
    Assign: type=<unknown>
    Name(c): type=String
    Name(a): type=&str
    If: type=<unknown>
    Compare: type=bool
    Name(a): type=&str
    NotEq: type=&str
    Name(b): type=&str
    Assign: type=<unknown>
    Name(c): type=String
    Name(b): type=&str
    If: type=<unknown>
    Compare: type=bool
    Name(b): type=&str
    Eq: type=&str
    Name(a): type=&str
    Assign: type=<unknown>
    Name(c): type=String
    Constant: type=&str
    Return: type=String
    Name(c): type=String

Function pathological:
    If: type=<unknown>
    Name(a): type=bool
    Assign: type=<unknown>
    Name(d): type=String
    Name(b): type=&str
    Assign: type=<unknown>
    Name(d): type=String
    Name(c): type=&str
    Return: type=String
    Name(d): type=String

