Function if_else:
    If: type=<unknown>
    Name(a): type=bool
    Return: type=i64
    Name(c): type=i64
    Return: type=i64
    Constant: type=i64

Function return_if_else:
    Return: type=i64
    IfExp: type=i64
    Name(a): type=bool
    Name(c): type=i64
    Constant: type=i64

Function if_elif_else:
    If: type=<unknown>
    BoolOp: type=bool
    And: type=
    Name(a): type=bool
    Name(b): type=bool
    Return: type=String
    Name(c): type=&str
    If: type=<unknown>
    BoolOp: type=bool
    Or: type=String
    Name(a): type=bool
    Name(b): type=bool
    Return: type=String
    Name(d): type=&str
    Return: type=String
    Constant: type=&str

Function while_loop:
    While: type=<unknown>
    BoolOp: type=bool
    Or: type=
    Name(a): type=bool
    Name(b): type=bool
    Expr: type=()
    Call: type=()
    Name(print): type=<unknown>
    Constant: type=&str

Function while_break_continue:
    While: type=<unknown>
    BoolOp: type=bool
    Or: type=
    BoolOp: type=bool
    And: type=
    Constant: type=bool
    Name(a): type=bool
    Name(b): type=bool
    If: type=<unknown>
    Name(a): type=bool
    Break: type=bool
    If: type=<unknown>
    Name(b): type=bool
    Continue: type=bool
    Expr: type=()
    Call: type=()
    Name(print): type=<unknown>
    Constant: type=&str

Function for_loop:
    Assign: type=<unknown>
    Name(total): type=i64
    Constant: type=i64
    For: type=<unknown>
    Name(i): type=i64
    Call: type=[i64]
    Name(range): type=<unknown>
    Name(a): type=i64
    Name(b): type=i64
    AugAssign: type=<unknown>
    Name(total): type=i64
    Add: type=<unknown>
    Name(i): type=i64
    Return: type=i64
    Name(total): type=i64

