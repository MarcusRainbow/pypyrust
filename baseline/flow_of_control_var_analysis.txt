Function if_else:
    If: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Return: type=i64
    Name: type=i64
    Load: type=<unknown>
    Return: type=i64
    Constant: type=i64

Function return_if_else:
    Return: type=i64
    IfExp: type=i64
    Name: type=bool
    Load: type=<unknown>
    Name: type=i64
    Load: type=<unknown>
    Constant: type=i64

Function if_elif_else:
    If: type=<unknown>
    BoolOp: type=bool
    And: type=
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Return: type=String
    Name: type=&str
    Load: type=<unknown>
    If: type=<unknown>
    BoolOp: type=bool
    Or: type=
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Return: type=String
    Name: type=&str
    Load: type=<unknown>
    Return: type=String
    Constant: type=&str

Function while_loop:
    While: type=<unknown>
    BoolOp: type=bool
    Or: type=
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Expr: type=()
    Call: type=()
    Name: type=<unknown>
    Load: type=<unknown>
    Constant: type=&str

Function while_break_continue:
    While: type=<unknown>
    BoolOp: type=bool
    Or: type=
    BoolOp: type=bool
    And: type=
    Constant: type=bool
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    If: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Break: type=
    If: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Continue: type=
    Expr: type=()
    Call: type=()
    Name: type=<unknown>
    Load: type=<unknown>
    Constant: type=&str

Function for_loop:
    Assign: type=<unknown>
    Name: type=i64
    Store: type=<unknown>
    Constant: type=i64
    For: type=<unknown>
    Name: type=i64
    Store: type=<unknown>
    Call: type=Unknown
    Name: type=<unknown>
    Load: type=<unknown>
    Name: type=i64
    Load: type=<unknown>
    Name: type=i64
    Load: type=<unknown>
    AugAssign: type=<unknown>
    Name: type=
    Store: type=<unknown>
    Add: type=<unknown>
    Name: type=
    Load: type=<unknown>
    Return: type=i64
    Name: type=i64
    Load: type=<unknown>

