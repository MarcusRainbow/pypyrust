Function add_mult:
    Return: type=i64
    BinOp: type=i64
    Name(a): type=i64
    Add: type=i64
    BinOp: type=i64
    Name(b): type=i64
    Mult: type=i64
    Name(c): type=i64

Function sub_div:
    Return: type=i64
    BinOp: type=i64
    Name(a): type=i64
    Sub: type=i64
    BinOp: type=i64
    Name(b): type=i64
    Div: type=i64
    Name(c): type=i64

Function floor_div:
    Return: type=i64
    BinOp: type=i64
    Name(a): type=i64
    FloorDiv: type=i64
    BinOp: type=i64
    Name(b): type=i64
    Mod: type=i64
    Name(c): type=i64

Function bitwise:
    Return: type=i64
    BinOp: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name(a): type=i64
    LShift: type=i64
    Name(b): type=i64
    BitAnd: type=i64
    BinOp: type=i64
    Name(b): type=i64
    RShift: type=i64
    Name(c): type=i64
    BitXor: type=i64
    BinOp: type=i64
    Name(a): type=i64
    BitOr: type=i64
    Name(b): type=i64

Function powers:
    Return: type=i64
    BinOp: type=i64
    Name(a): type=i64
    Mult: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name(a): type=i64
    Add: type=i64
    Name(b): type=i64
    Pow: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name(b): type=i64
    Add: type=i64
    Name(c): type=i64
    Pow: type=i64
    BinOp: type=i64
    Name(c): type=i64
    Add: type=i64
    Name(a): type=i64

Function unaries:
    Return: type=i64
    BinOp: type=i64
    UnaryOp: type=bool
    Not: type=
    BinOp: type=i64
    BinOp: type=i64
    UnaryOp: type=i64
    Invert: type=bool
    Name(a): type=i64
    Add: type=bool
    UnaryOp: type=i64
    UAdd: type=i64
    Name(b): type=i64
    Add: type=bool
    UnaryOp: type=i64
    USub: type=i64
    Name(c): type=i64
    Add: type=bool
    UnaryOp: type=i64
    Invert: type=bool
    UnaryOp: type=i64
    Invert: type=bool
    Name(a): type=i64

Function boolean:
    Return: type=bool
    BoolOp: type=bool
    Or: type=bool
    BoolOp: type=bool
    And: type=
    Name(a): type=bool
    Name(b): type=bool
    Name(c): type=bool
    UnaryOp: type=bool
    Not: type=bool
    BoolOp: type=bool
    Or: type=bool
    Name(a): type=bool
    Name(b): type=bool
    Name(c): type=bool

Function compare:
    Return: type=bool
    BoolOp: type=bool
    Or: type=
    Compare: type=bool
    Name(a): type=i64
    Eq: type=<unknown>
    Name(b): type=i64
    Compare: type=bool
    Name(b): type=i64
    NotEq: type=<unknown>
    Name(c): type=i64
    Compare: type=bool
    Name(a): type=i64
    Gt: type=<unknown>
    Name(b): type=i64
    Compare: type=bool
    Name(c): type=i64
    Lt: type=<unknown>
    Name(a): type=i64
    Compare: type=bool
    Name(a): type=i64
    LtE: type=<unknown>
    Name(b): type=i64
    Compare: type=bool
    Name(c): type=i64
    GtE: type=<unknown>
    Name(b): type=i64

Function precedence:
    Return: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name(a): type=i64
    Add: type=i64
    BinOp: type=i64
    Name(b): type=i64
    Sub: type=i64
    Name(c): type=i64
    Add: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name(b): type=i64
    Add: type=i64
    Name(c): type=i64
    Mult: type=i64
    Name(a): type=i64

Function multi_compare:
    Return: type=bool
    BoolOp: type=bool
    Or: type=
    Compare: type=bool
    Name(a): type=i64
    Lt: type=<unknown>
    Lt: type=<unknown>
    Name(b): type=i64
    Name(c): type=i64
    Compare: type=bool
    Name(a): type=i64
    GtE: type=<unknown>
    Gt: type=<unknown>
    Name(b): type=i64
    Name(c): type=i64
    Compare: type=bool
    Name(a): type=i64
    NotEq: type=<unknown>
    Eq: type=<unknown>
    Name(b): type=i64
    Name(c): type=i64

Function boolean_precedence:
    Return: type=bool
    BoolOp: type=bool
    Or: type=
    BoolOp: type=bool
    And: type=bool
    Name(a): type=bool
    Name(b): type=bool
    BoolOp: type=bool
    And: type=bool
    Name(c): type=bool
    Name(b): type=bool
    BoolOp: type=bool
    And: type=bool
    Name(a): type=bool
    Name(c): type=bool

