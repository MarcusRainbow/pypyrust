Function add_mult:
    Return: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Mult: type=i64
    Name: type=i64
    Load: type=<unknown>

Function sub_div:
    Return: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Sub: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Div: type=i64
    Name: type=i64
    Load: type=<unknown>

Function floor_div:
    Return: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    FloorDiv: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Mod: type=i64
    Name: type=i64
    Load: type=<unknown>

Function bitwise:
    Return: type=i64
    BinOp: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    LShift: type=i64
    Name: type=i64
    Load: type=<unknown>
    BitAnd: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    RShift: type=i64
    Name: type=i64
    Load: type=<unknown>
    BitXor: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    BitOr: type=i64
    Name: type=i64
    Load: type=<unknown>

Function powers:
    Return: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Mult: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    Name: type=i64
    Load: type=<unknown>
    Pow: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    Name: type=i64
    Load: type=<unknown>
    Pow: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    Name: type=i64
    Load: type=<unknown>

Function unaries:
    Return: type=i64
    BinOp: type=i64
    UnaryOp: type=bool
    Not: type=
    BinOp: type=i64
    BinOp: type=i64
    UnaryOp: type=i64
    Invert: type=bool
    Name: type=i64
    Load: type=<unknown>
    Add: type=bool
    UnaryOp: type=i64
    UAdd: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=bool
    UnaryOp: type=i64
    USub: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=bool
    UnaryOp: type=i64
    Invert: type=bool
    UnaryOp: type=i64
    Invert: type=bool
    Name: type=i64
    Load: type=<unknown>

Function boolean:
    Return: type=bool
    BoolOp: type=bool
    Or: type=bool
    BoolOp: type=bool
    And: type=
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    UnaryOp: type=bool
    Not: type=bool
    BoolOp: type=bool
    Or: type=bool
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>

Function compare:
    Return: type=bool
    BoolOp: type=bool
    Or: type=
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    Eq: type=i64
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    NotEq: type=i64
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    Gt: type=i64
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    Lt: type=i64
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    LtE: type=i64
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    GtE: type=i64
    Name: type=i64
    Load: type=<unknown>

Function precedence:
    Return: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Sub: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    BinOp: type=i64
    BinOp: type=i64
    Name: type=i64
    Load: type=<unknown>
    Add: type=i64
    Name: type=i64
    Load: type=<unknown>
    Mult: type=i64
    Name: type=i64
    Load: type=<unknown>

Function multi_compare:
    Return: type=bool
    BoolOp: type=bool
    Or: type=
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    Lt: type=i64
    Lt: type=i64
    Name: type=i64
    Load: type=<unknown>
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    GtE: type=i64
    Gt: type=i64
    Name: type=i64
    Load: type=<unknown>
    Name: type=i64
    Load: type=<unknown>
    Compare: type=bool
    Name: type=i64
    Load: type=<unknown>
    NotEq: type=i64
    Eq: type=i64
    Name: type=i64
    Load: type=<unknown>
    Name: type=i64
    Load: type=<unknown>

Function boolean_precedence:
    Return: type=bool
    BoolOp: type=bool
    Or: type=
    BoolOp: type=bool
    And: type=bool
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    BoolOp: type=bool
    And: type=bool
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>
    BoolOp: type=bool
    And: type=bool
    Name: type=bool
    Load: type=<unknown>
    Name: type=bool
    Load: type=<unknown>

