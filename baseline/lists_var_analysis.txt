Function create_list:
    Return: type=i64
    ListComp: type=<unknown>
    BinOp: type=i64
    Name(x): type=i64
    Mult: type=i64
    Name(x): type=i64
    comprehension: type=<unknown>
    Name(x): type=i64
    Call: type=[i64]
    Name(range): type=<unknown>
    Name(a): type=i64
    Name(b): type=i64

Function process_list:
    Return: type=(i64, i64)
    ListComp: type=<unknown>
    Tuple: type=(i64, i64)
    Name(x): type=i64
    Name(y): type=i64
    Load: type=<unknown>
    comprehension: type=<unknown>
    Tuple: type=<unknown>
    Name(x): type=i64
    Name(y): type=i64
    Store: type=<unknown>
    Call: type=[(i64, i64)]
    Name(zip): type=<unknown>
    Name(a): type=&[i64]
    Name(b): type=&[i64]

Function add_mult_lists:
    Assign: type=<unknown>
    Name(d): type=Vec<f64>
    BinOp: type=Vec<f64>
    BinOp: type=Vec<f64>
    Name(a): type=&[f64]
    Add: type=&[f64]
    Name(b): type=&[f64]
    Mult: type=Vec<f64>
    Name(c): type=Vec<f64>
    Return: type=Vec<f64>
    Name(d): type=Vec<f64>

Function manual_iterator:
    Assign: type=<unknown>
    Name(sum): type=f64
    Constant: type=f64
    Assign: type=<unknown>
    Name(prod): type=f64
    Constant: type=f64
    For: type=<unknown>
    Name(i): type=f64
    Name(a): type=&[f64]
    AugAssign: type=<unknown>
    Name(sum): type=f64
    Add: type=<unknown>
    Name(i): type=f64
    AugAssign: type=<unknown>
    Name(prod): type=f64
    Mult: type=<unknown>
    Name(i): type=f64
    Return: type=(f64, f64)
    Tuple: type=(f64, f64)
    Name(sum): type=f64
    Name(prod): type=f64
    Load: type=<unknown>

Function manual_dot_product:
    Assign: type=<unknown>
    Name(sum): type=f64
    Constant: type=f64
    For: type=<unknown>
    Tuple: type=<unknown>
    Name(i): type=f64
    Name(j): type=f64
    Store: type=<unknown>
    Call: type=[(f64, f64)]
    Name(zip): type=<unknown>
    Name(a): type=&[f64]
    Name(b): type=&[f64]
    AugAssign: type=<unknown>
    Name(sum): type=f64
    Add: type=<unknown>
    BinOp: type=f64
    Name(i): type=f64
    Mult: type=f64
    Name(j): type=f64
    Return: type=f64
    Name(sum): type=f64

